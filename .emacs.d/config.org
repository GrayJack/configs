* General settings
** Default packages initialization
   #+BEGIN_SRC emacs-lisp
    (require 'package)

   (setq
    package-archives
    '(("gnu" . "https://elpa.gnu.org/packages/")
      ("melpa" . "https://melpa.org/packages/")
      ("org"   . "http://orgmode.org/elpa/")))

   ;; Bootstrap use-package
   (unless (package-installed-p 'use-package)
     (package-refresh-contnts)
     (package-install 'use-package))
   (require 'use-package)
   #+END_SRC
** Evil mode
   #+BEGIN_SRC emacs-lisp
   ;;(use-package evil
   ;;  :ensure t
   ;;  :config
   ;;  (evil-mode 1))
   #+END_SRC

*** Defining some Evil shortcuts
    #+BEGIN_SRC emacs-lisp
      ;; (defvar my-leader-map (make-sparse-keymap)
      ;;   "Keymap for \"leader key\" shortcuts.")

      ;; ;; binding "," to the keymap
      ;; (define-key evil-normal-state-map "\\" my-leader-map)

      ;; ;; binding ",b"
      ;; (define-key my-leader-map "b" 'switch-to-buffer)
      ;; (define-key my-leader-map "k" 'kill-current-buffer)
      ;; (define-key my-leader-map "l" 'switch-to-next-buffer)
      ;; (define-key my-leader-map "h" 'switch-to-prev-buffer)
    #+END_SRC

* UI
** init UI stuff
  #+BEGIN_SRC emacs-lisp
  (custom-set-faces
    ;; custom-set-faces was added by Custom.
    ;; If you edit it by hand, you could mess it up, so be careful.
    ;; Your init file should contain only one such instance.
    ;; If there is more than one, they won't work right.
    '(default ((t (:family "Fira Code" :foundry "CTDB" :slant normal :weight normal :height 120 :width normal))))
    '(centaur-active-bar-face ((t (:inherit doom-modeline-bar)))))


  ;; Removing initial text
  (setq inhibit-startup-message t)


  ;; Removing tool bar, scroll bar
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;; (menu-bar-mode -1)

  ;; Line hl
  (global-hl-line-mode t)
  (line-number-mode t)
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers 'relative)
   #+END_SRC

** Themes (doom-themes)
   #+BEGIN_SRC emacs-lisp
   (use-package doom-themes
     :ensure t
     :config
     (load-theme 'doom-one t)
     (doom-themes-treemacs-config))
   #+END_SRC
** Modeline config (doom-modeline)
    #+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :ensure t
      :defer t
      :init (doom-modeline-mode 1)
      :config
      (set-face-foreground 'doom-modeline-evil-emacs-state "SkyBlue2")
      (set-face-foreground 'doom-modeline-evil-insert-state "chartreuse3")
      (set-face-foreground 'doom-modeline-evil-motion-state "plum3")
      (set-face-foreground 'doom-modeline-evil-normal-state "DarkGoldenrod2")
      (set-face-foreground 'doom-modeline-evil-operator-state "DarkGoldenrod2")
      (set-face-foreground 'doom-modeline-evil-visual-state "gray")
      (set-face-foreground 'doom-modeline-evil-replace-state "chocolate")

      (setq doom-modeline-buffer-file-name-style 'truncate-upto-root
            doom-modeline-indent-info t
      ;; Whether display icons in mode-line or not.
      ;; (setq doom-modeline-icon (display-graphic-p))
      ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
            doom-modeline-major-mode-icon t
      ;; Whether display color icons for `major-mode'. It respects
      ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
            doom-modeline-major-mode-color-icon t
      ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
            doom-modeline-buffer-state-icon t
      ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
      ;; and `doom-modeline-buffer-state-icon'.
            doom-modeline-buffer-modification-icon t
      ;; Whether display minor modes in mode-line or not.
            doom-modeline-minor-modes (featurep 'minions)
      ;; If non-nil, a word count will be added to the selection-info modeline segment.
            doom-modeline-enable-word-count nil
      ;; Whether display environment version or not
            doom-modeline-env-version t
      ;; Whether display the modal state icon.
      ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
      doom-modeline-modal-icon t))
    #+END_SRC
** Tab bar (Centaur-tabs)
  #+BEGIN_SRC emacs-lisp
    (use-package centaur-tabs
      :ensure t
      :demand
      :config
      (setq centaxur-tabs-style "bar"
    	centaur-tabs-height 32
    	centaur-tabs-set-icons t
    	centaur-tabs-set-modified-marker t
    	centaur-tabs-show-navigation-buttons t
    	centaur-tabs-set-bar 'left)
	    (centaur-tabs-mode t)
      :bind
      ("C-<prior>" . centaur-tabs-backward)
      ("C-<next>" . centaur-tabs-forward)
      :custom-face
      (centaur-active-bar-face ((t (:inherit doom-modeline-bar)))))
  #+END_SRC

* Modes
** Programming
*** LSP
    #+BEGIN_SRC emacs-lisp
    (setq lsp-keymap-prefix "s-l")

    (use-package lsp-mode
      :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
            (rust-mode . lsp)
            ;; if you want which-key integration
            (lsp-mode . lsp-enable-which-key-integration))
      :config
      (lsp-rust-server 'rust-analyzer)
      :commands lsp)

    ;; optionally
    (use-package lsp-ui :commands lsp-ui-mode)
    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
    (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
    #+END_SRC
*** Rust
    #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :ensure t
      :config
      (setq rust-format-on-save t)
      :hook
      (rust-mode-hook . (setq indent-tabs-mode nil)))

    #+END_SRC
*** Julia
    #+BEGIN_SRC emacs-lisp
    (use-package julia-mode
      :ensure t
      :init)
    #+END_SRC

** Org
*** Org packages
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC

*** Org configs
**** Some init definitions
     #+BEGIN_SRC emacs-lisp
     (setq org-support-shift-select t)
     (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
     #+END_SRC

**** Header templates
     #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
	     '("L" "#+TODO: TODO IN-PROGRESS WAITING DONE\n#+OPTIONS: tex:t\n#+STARTUP: latexpreview\n\n? "))
     #+END_SRC
** Parinfer
   #+BEGIN_SRC emacs-lisp
     (use-package parinfer-rust-mode
       :load-path "~/.emacs.d/manual/parinfer-rust-mode")
   #+END_SRC

** Ergoemacs
   #+BEGIN_SRC emacs-lisp
     (use-package ergoemacs-mode
       :ensure t
       :preface
         (setq ergoemacs-theme nil)
         (setq ergoemacs-keyboard-layout "us")
       :config
         (ergoemacs-mode 1))
   #+END_SRC
* General packages (or mm's)
** Commands hints in a bottom buffer
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :init
     (setq which-key-separator " ")
     (setq which-key-prefix-prefix "+")
     :config
     (which-key-mode))
   #+END_SRC

** Projectile
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-project-search-path '("~/Documents/projects/"))
    :bind
    (:map global-map
      ("C-c p" . projectile-command-map)))
  #+END_SRC

** Treemacs
   #+BEGIN_SRC emacs-lisp
   (use-package treemacs
     :ensure t
     :defer t
     :init
     (with-eval-after-load 'winum
       (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
     :config
     (progn
       (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
             treemacs-deferred-git-apply-delay      0.5
             treemacs-directory-name-transformer    #'identity
             treemacs-display-in-side-window        t
             treemacs-eldoc-display                 t
             treemacs-file-event-delay              5000
             treemacs-file-extension-regex          treemacs-last-period-regex-value
             treemacs-file-follow-delay             0.2
             treemacs-file-name-transformer         #'identity
             treemacs-follow-after-init             t
             treemacs-git-command-pipe              ""
             treemacs-goto-tag-strategy             'refetch-index
             treemacs-indentation                   2
             treemacs-indentation-string            " "
             treemacs-is-never-other-window         nil
             treemacs-max-git-entries               5000
             treemacs-missing-project-action        'ask
             treemacs-move-forward-on-expand        nil
             treemacs-no-png-images                 nil
             treemacs-no-delete-other-windows       t
             treemacs-project-follow-cleanup        nil
             treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
             treemacs-position                      'left
             treemacs-recenter-distance             0.1
             treemacs-recenter-after-file-follow    nil
             treemacs-recenter-after-tag-follow     nil
             treemacs-recenter-after-project-jump   'always
             treemacs-recenter-after-project-expand 'on-distance
             treemacs-show-cursor                   nil
             treemacs-show-hidden-files             t
             treemacs-silent-filewatch              nil
             treemacs-silent-refresh                nil
             treemacs-sorting                       'alphabetic-asc
             treemacs-space-between-root-nodes      t
             treemacs-tag-follow-cleanup            t
             treemacs-tag-follow-delay              1.5
             treemacs-user-mode-line-format         nil
             treemacs-user-header-line-format       nil
             treemacs-width                         22)

       ;; The default width and height of the icons is 22 pixels. If you are
       ;; using a Hi-DPI display, uncomment this to double the icon size.
       ;;(treemacs-resize-icons 44)

       (treemacs-follow-mode t)
       (treemacs-filewatch-mode t)
       (treemacs-fringe-indicator-mode t)
       (pcase (cons (not (null (executable-find "git")))
                    (not (null treemacs-python-executable)))
         (`(t . t)
          (treemacs-git-mode 'deferred))
         (`(t . _)
          (treemacs-git-mode 'simple))))
     :bind
     (:map global-map
           ("M-0"       . treemacs-select-window)
           ("C-x t 1"   . treemacs-delete-other-windows)
           ("M-\\"      . treemacs)
           ("C-x t B"   . treemacs-bookmark)
           ("C-x t C-t" . treemacs-find-file)
           ("C-x t M-t" . treemacs-find-tag)))

   (use-package treemacs-projectile
     :after treemacs projectile
     :ensure t)

   (use-package treemacs-icons-dired
     :after treemacs dired
     :ensure t
     :config (treemacs-icons-dired-mode))

   (use-package treemacs-magit
     :after treemacs magit
     :ensure t)

   (use-package treemacs-persp
     :after treemacs persp-mode
     :ensure t
     :config (treemacs-set-scope-type 'Perspectives))

   (add-hook 'treemacs-mode-hook (lambda() (display-line-numbers-mode -1)))
   #+END_SRC
** Git
   #+BEGIN_SRC emacs-lisp
   (use-package git-gutter
     :ensure t
     :init
     (global-git-gutter-mode t))
   #+END_SRC

** snippets
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (yas-reload-all)
     (add-hook 'prog-mode-hook #'yas-minor-mode))

   (use-package doom-snippets
     :load-path "~/.emacs.d/manual/doom-snippets"
     :after yasnippet)

   (doom-snippets-initialize)
   #+END_SRC
** Auto completions
*** auto-complete
    #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      :config
      (ac-config-default))
    #+END_SRC
** Dashboard
   #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :config
     (dashboard-setup-startup-hook)
     (setq dashboard-items '((recents  . 5)
                          (projects . 10)
                          (agenda   . 5))
	   show-week-agenda-p t
	   dashboard-set-file-icons t
	   dashboard-set-heading-icons t
	   dashboard-banner-logo-title "I WANT TO BE EVIL"
	   dashboard-center-content t))
   #+END_SRC
** Beacon
   A light that follows your cursor around so you don't lose it!
   #+BEGIN_SRC emacs-lisp
   (use-package beacon
     :ensure t
     :config
     (beacon-mode 1))
   #+END_SRC
** Ivy
   Incremental completions for buffers and minibuffers
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :config
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     (setq ivy-display-style 'fancy)
     :init
     (ivy-mode 1))
   #+END_SRC
*** Ivy-posframe
    A package for making ivy completions as a pop-up window
    #+BEGIN_SRC emacs-lisp
    (use-package ivy-posframe
      :ensure t
      :config
      (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
      (setq ivy-posframe-parameters '((internal-border-width . 10)))
      (setq ivy-posframe-width 60)
      (setq ivy-posframe-height 100)
      :init
      (ivy-posframe-mode 1))
    #+END_SRC
