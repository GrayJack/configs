# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
set $alt Mod1
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term alacritty
# Your preferred editors
set $tui_editor nvim
set $gui_editor atom
# Your preferred browser
set $browser firefox
# Your prefered filemanagers
set $tui_fm alacritty -e ranger
set $gui_fm dolphin
# Your preferred screenshot software
set $screenshot flameshot gui
# Your preferred application launcher
# Note: it's recommended that you pass the final command to sway
set $menu rofi -show run -sidebar-mode | xargs swaymsg exec

# Lock screen fancy
set $lock ~/.config/sway/swaylock-fancy/lock

### Load pywal config
include "$HOME/.cache/wal/colors-sway"

## Keyboard
input "1:1:AT_Translated_Set_2_keyboard" {
    xkb_layout br
    xkb_variant ,nodeadkeys
    xkb_options grp:alt_shift_toggle
}

### XOrg support
xwayland enable

### Fonts
font pango:Noto Sans 9

### Output configuration
#
# Default wallpaper (more resolutions are available in /usr/share/backgrounds/sway/)
output * bg $wallpaper fill
#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# Example configuration:
#
exec swayidle -w \
         timeout 600 '$lock' \
         timeout 600 'swaymsg "output * dpms off"' \
              resume 'swaymsg "output * dpms on"' \
          before-sleep '$lock'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# Example configuration:
#
input "1739:32382:DELL0828:00_06CB:7E7E_Touchpad" {
    dwt enabled
    tap enabled
    natural_scroll enabled
    middle_emulation enabled
}
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

### Key bindings
#
# Basics:
#
    # start a terminal
    bindsym $mod+Return exec $term

    # kill focused window
    bindsym $mod+x kill

    # start your launcher
    bindsym $mod+space exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # reload the configuration file
    bindsym $mod+Ctrl+r reload

    # restart sway inplace (preserves your layout/session, can be used to upgrade sway)
    bindsym $mod+Shift+r restart

    # lock screen
    bindsym $mod+Ctrl+l exec $lock

    # exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+q exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
#
# I/O configuration
#
    # Set a volume control with AudioPulse
    bindsym XF86AudioRaiseVolume exec amixer -q set Master -q 5%+
    bindsym XF86AudioLowerVolume exec amixer -q set Master -q 5%-
    bindsym XF86AudioMute        exec amixer -q set Master

    # Sreen brightness controls
    bindsym XF86MonBrightnessUp   exec light -A 5   # increase screen brightness
    bindsym XF86MonBrightnessDown exec light -U 5 # decrease screen brightness

    # Spotify related key bindings
    bindsym XF86AudioPlay exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause"
    bindsym XF86AudioStop exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Stop"
    bindsym XF86AudioPrev exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous"
    bindsym XF86AudioNext exec "dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next"

    # Other way for key bind, but not working in spotify
    # bindsym XF86AudioPlay  exec playerctl play
    # bindsym XF86AudioPause exec playerctl pause
    # bindsym XF86AudioNext  exec playerctl next
    # bindsym XF86AudioPrev exec playerctl previous

#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # _move_ the focused window with the same, but add Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right
#
# Workspaces:
#
    # switch to workspace
    bindsym $mod+1 workspace 1
    bindsym $mod+2 workspace 2
    bindsym $mod+3 workspace 3
    bindsym $mod+4 workspace 4
    bindsym $mod+5 workspace 5
    bindsym $mod+6 workspace 6
    bindsym $mod+7 workspace 7
    bindsym $mod+8 workspace 8
    bindsym $mod+9 workspace 9
    bindsym $mod+0 workspace 10
    # move focused container to workspace
    bindsym $mod+Shift+1 move container to workspace 1
    bindsym $mod+Shift+2 move container to workspace 2
    bindsym $mod+Shift+3 move container to workspace 3
    bindsym $mod+Shift+4 move container to workspace 4
    bindsym $mod+Shift+5 move container to workspace 5
    bindsym $mod+Shift+6 move container to workspace 6
    bindsym $mod+Shift+7 move container to workspace 7
    bindsym $mod+Shift+8 move container to workspace 8
    bindsym $mod+Shift+9 move container to workspace 9
    bindsym $mod+Shift+0 move container to workspace 10
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    bindsym $alt+Left workspace next_on_output
    bindsym $alt+Right workspace prev_on_output

    assign [class="Firefox"] "1"
    assign [class="Atom"] "2"
#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+y splith
    bindsym $mod+t splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout tabbed
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+Ctrl+space focus mode_toggle

    # move focus to the parent container
    bindsym $mod+Shift+p focus parent
#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"
#
# Gaps
#
    # Set inner/outer gaps
    gaps inner 14
    gaps outer -2

    # Additionally, you can issue commands with the following syntax. This is useful to bind keys to changing the gap size.
    # gaps inner|outer current|all set|plus|minus <px>
    # gaps inner all set 10
    # gaps outer all plus 5

    # Smart gaps (gaps used if only more than one container on the workspace)
    smart_gaps on
    smart_borders on

    # Smart borders (draw borders around container only if it is not the only container on this workspace)
    # on|no_gaps (on=always activate and no_gaps=only activate if the gap size to the edge of the screen is 0)
    smart_borders on

# Press $mod+Shift+g to enter the gap mode. Choose o or i for modifying outer/inner gaps. Press one of + / - (in-/decrement for current workspace) or 0 (remove gaps for current workspace). If you also press Shift with these keys, the change will be global for all workspaces.
set $mode_gaps Gaps: (o) outer, (i) inner
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)
bindsym $mod+Shift+g mode "$mode_gaps"

mode "$mode_gaps" {
        bindsym o      mode "$mode_gaps_outer"
        bindsym i      mode "$mode_gaps_inner"
        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_gaps_inner" {
        bindsym plus  gaps inner current plus 5
        bindsym minus gaps inner current minus 5
        bindsym 0     gaps inner current set 0

        bindsym Shift+plus  gaps inner all plus 5
        bindsym Shift+minus gaps inner all minus 5
        bindsym Shift+0     gaps inner all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
mode "$mode_gaps_outer" {
        bindsym plus  gaps outer current plus 5
        bindsym minus gaps outer current minus 5
        bindsym 0     gaps outer current set 0

        bindsym Shift+plus  gaps outer all plus 5
        bindsym Shift+minus gaps outer all minus 5
        bindsym Shift+0     gaps outer all set 0

        bindsym Return mode "default"
        bindsym Escape mode "default"
}
#
# User Variables
#
    bindsym $mod+q exec $gui_fm
    bindsym $mod+Shift+e exec $tui_fm
    bindsym $mod+b exec $browser
    bindsym $mod+a exec $gui_editor
    bindsym $mod+Shift+a exec $tui_editor
    bindsym $mod+p exec $screenshot
    bindsym $alt+space exec zeal
#
# Status Bar:
#
# Read `man 5 sway-bar` for more information about this section.
bar {
    font pango:Hack Nerd Font 9
    position top
    icon_theme Papirus-Dark-Maia
    tray_output primary

    # When the status_command prints a new line to stdout, swaybar updates.
    # The default just shows the current date and time.
    # status_command while date +'%Y-%m-%d %l:%M:%S %p'; do sleep 1; done
    status_command ~/.config/sway/bumblebee-status/bumblebee-status -m spotify memory sensors cpu brightness pasink bluetooth nic battery date time -p memory.format="{used}/{total}" time.format="%H:%M" date.format="%d/%m/%Y" -t iceberg-rainbow

    colors {
        #                     border        background        text
        focused_workspace     $color6       $color6         $background
        inactive_workspace    $background   $background     $foreground
        urgent_workspace      $color1       $color1         $foreground
        background            $background
        #statusline #ffffff
        #background #323232
        #inactive_workspace #323232 #323232 #5c5c5c
    }
}

### Window decoration
for_window [class="^.*"] border pixel 2
# default_border pixel 2
# window colors
#                       border       background     text        indicator
client.focused          $color6      $color6        $color0     $color5 $color8
client.unfocused        $color3      $color3        $color0     $color5 $color8
client.focused_inactive $color7      $color7        $color0     $color5 $color8
client.urgent           $color1      $color1        $color0     $color5 $color8

### Autostart
exec /usr/lib/polkit-1/polkitd --no-debug
exec /usr/bin/lxqt-policykit-agent &
exec --no-startup-id nm-applet --sm-disable
# exec --no-startup-id blueman-applet
# exec --no-startup-id indicator-kdeconnect
# Remove anoying beep
# exec --no-startup-id xset b off

include /etc/sway/config.d/*
